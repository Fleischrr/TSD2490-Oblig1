@page "/MemoryGame"
@using System.Timers

<style>
    .container {
        width: 400px;
    }

    .emoji-button {
        width: 100px;
        height: 100px;
        font-size: 50px;
    }

    .start-restart-button {
        width: 150px;
        height: 75px;
        font-size: 50px;
    }


</style>


<div class="container">
    
    @if (usernameEnterd) 
    {
        @if (gameOver)
        {
            <div style="text-align: center;">
                <h1>Game Over!</h1>
            </div>
        }
        else if (gameComplete)
        {
            <div style ="text-align: center;">
                <h1>Victory!</h1>
            </div>
        }

        <div class="row">
            @for (var emojiNumber = 0; emojiNumber < shuffeldEmoji.Count; emojiNumber++)
            {
                var emoji = shuffeldEmoji[emojiNumber];
                var uniqueDescription = $"Button #{emojiNumber}";

                <div class="col-3">
                    <button @onclick="@(() => ButtonClick(emoji, uniqueDescription))" 
                        type="button" class="btn btn-outline-dark emoji-button">
                        <h1>@emoji</h1>
                    </button>
                </div>
            }
        </div>
        
        <div style="text-align: center;">
            <h2>Matches found: @matchesFound</h2>
        </div>

        <div style="text-align: center;">
            <h2>Time: @timeDisplay</h2>
        </div>

        <div style="text-align: center;">
            <button @onclick="@(() => StartRestartGame())" type="button" class="btn btn-outline-dark start-restart-button">
                @if (isGameRunning)
                {
                    <h1>Restart</h1>
                }
                else
                {
                    <h1>Start</h1>
                }
            </button>
        </div>
    }

    @if (!usernameEnterd)
    {
        <div style="text-align: center;">
            <label>To save your score enter your username below:</label>
            <input type="text" @bind-value="@userInput" />
            <button @onclick="@(() => SaveUsername())" type="button" class="btn btn-outline-dark">Save</button>
        </div>

    }
    
    <div style="text-align: center;">
        <h3>
            Highscores
        </h3>
    </div>
    <div>
        <ol>
            @foreach (var player in players.Where(p => !String.IsNullOrEmpty(p.getUsername())).OrderByDescending(p => float.Parse(p.getHighscore())))
            {
                <li>@player.getUsername(): @player.getHighscore()</li>
            }
        </ol>
    </div>

    

</div>


@code {
    //liste av emoji temaer. 3 temaer med 8 par emoji hver.
    List<List<string>> emojiThemes = new List<List<string>>()
    {
        //liste med dyr emoji. 8 par.
        new List<string>() 
        { 
            "🐶","🐶",
            "🐺","🐺",
            "🐮","🐮",
            "🦊","🦊",
            "🐱","🐱",
            "🦁","🦁",
            "🐯","🐯",
            "🐹","🐹"
        },

        //liste med ball emoji. 8 par.
        new List<string>() 
        { 
            "⚽","⚽",
            "⚾","⚾",
            "🥎","🥎",
            "🏀","🏀",
            "🏐","🏐",
            "🏈","🏈",
            "🏉","🏉",
            "🎱","🎱"
        },

        //liste med klokke emoji. 8 par.
        new List<string>() 
        { 
            "🕛","🕛",
            "🕒","🕒",
            "🕕","🕕",
            "🕘","🕘",
            "🕜","🕜",
            "🕟","🕟",
            "🕢","🕢",
            "🕦","🕦"
        }
    };

    //håndtere navn og highscore.
    private class Player
    {
        private string username = string.Empty;
        private string highscore = "0.0";

        public Player(string username, string highscore)
        {
            this.username = username;
            this.highscore = highscore;
        }

        public string getUsername()
        {
            return username;
        }

        public string getHighscore()
        {
            return highscore;
        }
    }

    //timer deklarasjoner.
    Timer timer;
    int tenthsOfSecondsElapsed = 0;
    string timeDisplay;

    //spill deklarasjoner.
    List<string> shuffeldEmoji = new List<string>();
    int matchesFound = 0;
    bool isGameRunning, gameComplete, gameOver, usernameEnterd = false;

    string userInput = string.Empty;
    List<Player> players = new List<Player>();

    //sett opp timer samt spill ved oppstart av siden.
    protected override void OnInitialized()
    {
        timer = new Timer(100);
        timer.Elapsed += Timer_Tick;

        setUpGame();
    }

    //håndtere oppsett spill og blande emoji.
    private void setUpGame()
    {
        //start på 0 treff og 20 sekunder
        matchesFound = 0;               
        tenthsOfSecondsElapsed = 200;   
        timeDisplay = "20.0";

        fillEmojiesToScreen();
    }

    //håndtere blanding av emoji.
    private void fillEmojiesToScreen()
    {
        //tillfeldig tall generator mellom 0 og 2. 3 temaer.
        Random random = new Random();
        int randInt = random.Next(3);

        //velge tilfeldig emoji tema og blande de
        List<string> chosenEmojiTheme = emojiThemes[randInt];
        shuffeldEmoji = chosenEmojiTheme.OrderBy(item => random.Next()).ToList();
    }

    //håndtere lagring av brukernavn.
    private void SaveUsername()
    {
        usernameEnterd = true;
    }

    //håndtere start og restart av spill.
    private void StartRestartGame() {
        gameComplete = false;
        gameOver = false;


        //hvis spill kjører, stopp timer og reset spill. Ellers start spill.
        if (isGameRunning)
        {
            timer.Stop();
            isGameRunning = false;
            usernameEnterd = false;
            setUpGame();
        }
        else
        {
            timer.Start();
            isGameRunning = true;
        }
    }

    //deklarasjoner for å holde styr på valgt emoji.
    string lastEmojiFound = string.Empty;
    string lastDescription = string.Empty;

    //håndtere museklikk på emoji.
    private void ButtonClick(string emoji, string emojiDescription)
    {       
        //første klikk på emoji, to like funnet, eller ulike par.
        if (lastEmojiFound == string.Empty)
        {
            //første museklikk. Lagre valg.
            lastEmojiFound = emoji;
            lastDescription = emojiDescription;

            //start timer ved første klikk
            if (!isGameRunning)
            {
                timer.Start();
                isGameRunning = true;
            }

        }
        else if ((lastEmojiFound == emoji) && (emojiDescription != lastDescription))
        {
            //to like funnet. Reset valg.
            lastEmojiFound = string.Empty;

            //bytte ut funnet dyr men tom string for å fjerne de.
            shuffeldEmoji = shuffeldEmoji.Select(a => a.Replace(emoji, string.Empty)).ToList();

            //iterer antall treff. Stopp ved 8 treff.
            matchesFound++;
            if (matchesFound == 8)
            {
                GameComplete();
            }
        }
        else
        {
            //valg av ulike par. Reset valg.
            lastEmojiFound = string.Empty;
        }
    }

    //håndtering av spill fullført
    private void GameComplete()
    {
        timer.Stop();
        gameComplete = true;
        string currentScore = timeDisplay;

        //hvis brukernavn tilstede, legg til i highscore listen.
        if (usernameEnterd)
        {
            players.Add(new Player(userInput, currentScore));
        }
        
        userInput = string.Empty;
    }

    //oppdatere tidssaldo.
    private void Timer_Tick(object source, ElapsedEventArgs e)
    {
        InvokeAsync(() =>
        {
            //trekk fra 1/10 sekund fra tidssaldo. Sjekk om tid er ute, eller vanlig oppdatering.
            tenthsOfSecondsElapsed--;   
            if (tenthsOfSecondsElapsed == 0)    
            {
                timer.Stop();
                timeDisplay = "0.0";
                gameOver = true;
            }
            else
            {
                timeDisplay = (tenthsOfSecondsElapsed / 10F).ToString("0.0");
            }

            //oppdaterer siden.
            StateHasChanged();

        });

    }
}
