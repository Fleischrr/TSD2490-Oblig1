@page "/MemoryGame"
@using System.Timers

<style>
    .container {
        width: 400px;
    }

    .emoji-button {
        width: 100px;
        height: 100px;
        font-size: 50px;
    }

    .start-restart-button {
        width: 150px;
        height: 75px;
        font-size: 50px;
    }


</style>


<div class="container">
    
    @if (usernameEnterd) 
    {
        @if (gameOver)
        {
            <div style="text-align: center;">
                <h1>Game Over!</h1>
            </div>
        }
        else if (gameComplete)
        {
            <div style ="text-align: center;">
                <h1>Victory!</h1>
            </div>
        }

        <div class="row">
            @for (var emojiNumber = 0; emojiNumber < shuffeldEmoji.Count; emojiNumber++)
            {
                var emoji = shuffeldEmoji[emojiNumber];
                var notEmoji = emptyEmoji[emojiNumber];
                var uniqueDescription = $"Button #{emojiNumber}";
                int index = emojiNumber;

                <div class="col-3">
                    <button @onclick="@(() => ButtonClick(emoji, uniqueDescription, index))" 
                        type="button" class="btn btn-outline-dark emoji-button">
                        <h1>@notEmoji</h1>
                    </button>
                </div>
            }
        </div>
        
        <div style="text-align: center;">
            <h2>Matches found: @matchesFound</h2>
        </div>

        <div style="text-align: center;">
            <h2>Time: @timeDisplay</h2>
        </div>

        <div style="text-align: center;">
            <button @onclick="@(() => StartRestartGame())" type="button" class="btn btn-outline-dark start-restart-button">
                @if (isGameRunning)
                {
                    <h1>Restart</h1>
                }
                else
                {
                    <h1>Start</h1>
                }
            </button>
        </div>
    }

    @if (!usernameEnterd)
    {
        <div style="text-align: center;">
            <label>To save your score enter your username below:</label>
            <input type="text" @bind-value="@userInput" />
            <button @onclick="@(() => SaveUsername())" type="button" class="btn btn-outline-dark">Save</button>
        </div>

    }
    
    <div style="text-align: center;">
        <h3>
            Highscores
        </h3>
    </div>
    <div>
        <ol>
            @foreach (var player in players.Where(p => !String.IsNullOrEmpty(p.getUsername())).OrderByDescending(p => float.Parse(p.getHighscore())))
            {
                <li>@player.getUsername(): @player.getHighscore()</li>
            }
        </ol>
    </div>

    

</div>


@code {

    //liste av emoji temaer. 3 temaer med 8 par emoji hver.
    List<List<string>> emojiThemes = new List<List<string>>()
    {
        new List<string>() 
        { 
            "🐶","🐶",
            "🐺","🐺",
            "🐮","🐮",
            "🦊","🦊",
            "🐱","🐱",
            "🦁","🦁",
            "🐯","🐯",
            "🐹","🐹"
        },

        new List<string>() 
        { 
            "⚽","⚽",
            "⚾","⚾",
            "🥎","🥎",
            "🏀","🏀",
            "🏐","🏐",
            "🏈","🏈",
            "🏉","🏉",
            "🎱","🎱"
        },

        new List<string>() 
        { 
            "🕛","🕛",
            "🕒","🕒",
            "🕕","🕕",
            "🕘","🕘",
            "🕜","🕜",
            "🕟","🕟",
            "🕢","🕢",
            "🕦","🕦"
        }
    };

    private class Player
    {
        private string username = string.Empty;
        private string highscore = "0.0";

        public Player(string username, string highscore)
        {
            this.username = username;
            this.highscore = highscore;
        }

        public string getUsername()
        {
            return username;
        }

        public string getHighscore()
        {
            return highscore;
        }
    }

    //timer deklarasjoner.
    Timer timer;
    int tenthsOfSecondsElapsed = 0;
    string timeDisplay;

    //spill deklarasjoner.
    List<string> shuffeldEmoji = new List<string>();
    List<string> emptyEmoji = new List<string>()
    {
        "", "",
        "", "",
        "", "",
        "", "",
        "", "",
        "", "",
        "", "",
        "", "",
    };

    int matchesFound = 0;
    bool isGameRunning, gameComplete, gameOver, usernameEnterd = false;

    string userInput = string.Empty;
    List<Player> players = new List<Player>();

    protected override void OnInitialized()
    {
        timer = new Timer(100);
        timer.Elapsed += Timer_Tick;

        setUpGame();
    }

    private void setUpGame()
    {
        //start på 0 treff og 40 sekunder
        matchesFound = 0;               
        tenthsOfSecondsElapsed = 400;   
        timeDisplay = "40.0";

        //tømme emptyEmoji og foundEmoji.
        emptyEmoji = emptyEmoji.Select(e => "").ToList();
        foundEmoji = new List<string>();

        fillEmojiesToScreen();
    }

    private void fillEmojiesToScreen()
    {
        //tillfeldig tall generator mellom 0 og 2. For 3 temaer.
        Random random = new Random();
        int randInt = random.Next(3);

        //velge tilfeldig emoji tema og blande de
        List<string> chosenEmojiTheme = emojiThemes[randInt];
        shuffeldEmoji = chosenEmojiTheme.OrderBy(item => random.Next()).ToList();
    }

    private void SaveUsername()
    {
        usernameEnterd = true;
    }

    //deklarasjoner for å holde styr på valgt og vist emoji.
    string lastEmojiFound = string.Empty;
    string lastDescription = string.Empty;
    int lastEmojiIndex;
    List<string> foundEmoji = new List<string>();

    private async void ButtonClick(string emoji, string emojiDescription, int index)
    {    
        if (gameComplete || gameOver)
        {
            //spillet er ferdig eller over. Gjør ingenting.
            return;
        }

        if ( !foundEmoji.Contains(emoji) )
        {
            if (lastEmojiFound == string.Empty)
            {
                //første museklikk. Lagre valg.
                lastEmojiFound = emoji;
                lastDescription = emojiDescription;
                lastEmojiIndex = index;

                //vis valgt emoji.
                emptyEmoji[index] = emoji;

                //hvis første klikk starter timer.
                if (!isGameRunning)
                {
                    timer.Start();
                    isGameRunning = true;
                }

            }
            else if ((lastEmojiFound == emoji) && (emojiDescription != lastDescription))
            {
                //to like funnet. Vis emoji og reset valg.
                foundEmoji.Add(emoji);
                foundEmoji.Add(lastEmojiFound);

                lastEmojiFound = string.Empty;
                lastDescription = string.Empty;

                emptyEmoji[index] = emoji;

                //iterer antall treff. Stopp ved 8 treff.
                matchesFound++;
                if (matchesFound == 8)
                {
                    GameComplete();
                }
            }
            else
            {
                //valg av ulike par. Vis trykk, deretter reset valg.
                emptyEmoji[index] = emoji;
                await Task.Delay(150);

                emptyEmoji[index] = string.Empty;
                emptyEmoji[lastEmojiIndex] = string.Empty;

                lastEmojiFound = string.Empty;
                lastDescription = string.Empty;
            }
        }
    }

    private void StartRestartGame() {
        //tilbakestille variabler.
        gameComplete = false;
        gameOver = false;
        lastEmojiFound = string.Empty;
        lastDescription = string.Empty;

        
        if (isGameRunning)
        {
            //hvis spill kjører, stopp timer og reset spill.
            timer.Stop();
            isGameRunning = false;
            usernameEnterd = false;
            setUpGame();
        }
        else
        {
            //ellers start spill.
            timer.Start();
            isGameRunning = true;
        }
    }

    private void GameComplete()
    {
        timer.Stop();
        gameComplete = true;
        string currentScore = timeDisplay;

        if (usernameEnterd)
        {
            //hvis brukernavn tilstede, legg til i highscore listen og reset brukernavn.
            players.Add(new Player(userInput, currentScore));
            userInput = string.Empty;
        }

        //vis alle emoji.
        emptyEmoji = shuffeldEmoji;
    }

    private void Timer_Tick(object source, ElapsedEventArgs e)
    {
        InvokeAsync(() =>
        {
            tenthsOfSecondsElapsed--;   
            if (tenthsOfSecondsElapsed == 0)    
            {
                //tid er ute. Stop timer, game over, vis alle emoji.
                timer.Stop();
                timeDisplay = "0.0";
                gameOver = true;
                emptyEmoji = shuffeldEmoji;
            }
            else
            {
                //vanlig oppdatering av tid.
                timeDisplay = (tenthsOfSecondsElapsed / 10F).ToString("0.0");
            }

            StateHasChanged();
        });
    }
}
